using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace VulnerabilityScanner.ApiAuthorization.Helpers;

public static class SyntaxTreeExtensions
{
    public static NamespaceDeclarationSyntax GetNamespace(this CompilationUnitSyntax root)
    {
        return (NamespaceDeclarationSyntax)root.Members.First();
    }
    public static List<ClassDeclarationSyntax> GetClasses(this NamespaceDeclarationSyntax @namespace)
    {
        return @namespace.Members.Cast<ClassDeclarationSyntax>().ToList();
    }
    public static IEnumerable<AttributeSyntax> GetAttributesThatContains(this MemberDeclarationSyntax @class, string name)
    {
        List<AttributeListSyntax> attributeLists = @class.AttributeLists.ToList();
        IEnumerable<AttributeSyntax> attributes = attributeLists.SelectMany(a => a.Attributes)
                                                                .Where(a => a.GetText().ToString().Contains(name));
        return attributes;
    }
    public static IEnumerable<AttributeSyntax> GetAttributesThatContainsOneOf(this MemberDeclarationSyntax @class, params string[] names)
    {
        AttributeListSyntax attributeList = @class.AttributeLists.FirstOrDefault();
        IEnumerable<AttributeSyntax> attributes = attributeList?.Attributes.Where(a => names.Any(n => a.GetText().ToString().Contains(n)));
        
        if (attributes == null) return new List<AttributeSyntax>();
        return attributes;
    }
    public static List<MethodDeclarationSyntax> GetAllMethods(this ClassDeclarationSyntax @class)
    {
        return @class.Members
                     .Where(m => m is MethodDeclarationSyntax)
                     .Cast<MethodDeclarationSyntax>()
                     .ToList();
    }
    public static string? FirstOrDefaultArgumentName(this AttributeSyntax attribute)
    {
        AttributeArgumentSyntax argument = attribute.ArgumentList?.Arguments.FirstOrDefault();
        string argumentName = argument?.Expression.GetText().ToString().Replace("MemberGroups.", "");
        return argumentName?.Replace(" ", "").Replace("+\",\"+", ", ");
    }
}