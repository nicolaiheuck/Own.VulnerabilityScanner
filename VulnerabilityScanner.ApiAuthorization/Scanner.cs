using System.Data;
using System.Diagnostics;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using VulnerabilityScanner.ApiAuthorization.Helpers;
using VulnerabilityScanner.ApiAuthorization.Models;

namespace VulnerabilityScanner.ApiAuthorization;

public static class Scanner
{
    public static void ScanControllersForAuthorizationUsingStrings(List<ApiController> controllers)
    {
        foreach (ApiController controller in controllers)
        {
            string data = File.ReadAllText(controller.File.FullName);
            controller.HasAuthorization = data.Contains(Constants.MemberAuthorize);
        }
    }
    public static void ScanControllersForAuthorizationUsingSyntaxTree(List<ApiController> controllers)
    {
        foreach (ApiController controller in controllers)
        {
            string data = File.ReadAllText(controller.File.FullName);
            SyntaxTree tree = CSharpSyntaxTree.ParseText(data);
            CompilationUnitSyntax root = tree.GetCompilationUnitRoot();

            NamespaceDeclarationSyntax @namespace = root.GetNamespace();
            ClassDeclarationSyntax? @class = @namespace.GetClasses().FirstOrDefault();
            if (@class == null) throw new InvalidOperationException($"The file {controller.File.FullName} doesn't contain a class");
            
            AttributeSyntax? attribute = @class.GetAttributesThatContains("MemberAuthorize").FirstOrDefault();
            
            controller.HasAuthorization = attribute != null;

            controller.AccessGroup = attribute?.FirstOrDefaultArgumentName();
            ScanForEndpoints(controller, @class);
        }
    }
    private static void ScanForEndpoints(ApiController controller, ClassDeclarationSyntax @class)
    {
        List<MethodDeclarationSyntax> methods = @class.GetAllMethods();
        foreach (MethodDeclarationSyntax method in methods)
        {
            bool isEndpoint = method.GetAttributesThatContainsOneOf("HttpGet", "HttpPost", "HttpPut", "HttpDelete")
                                    .Any();
            if (!isEndpoint) continue;
            Endpoint endpoint = new()
            {
                HasAuthorization = method.GetAttributesThatContains(Constants.MemberAuthorizeAttribute)
                                         .Any(),
                AccessGroup = method.GetAttributesThatContains(Constants.MemberAuthorizeAttribute)
                                    .FirstOrDefault()?
                                    .FirstOrDefaultArgumentName(),
                Name = method.Identifier.Text,
                Parent = controller,
            };

            controller.Endpoints.Add(endpoint);
            if (!controller.HasAuthorization)
            {
                controller.HasAuthorization = controller.Endpoints.Any(e => e.HasAuthorization);
            }
        }
    }
    public static List<ApiController> ScanForControllers(string folderPath)
    {
        FileInfo[] files = new DirectoryInfo(folderPath).GetFiles("*.cs", SearchOption.AllDirectories);
        List<ApiController> controllers = new();
        foreach (FileInfo file in files)
        {
            string data = File.ReadAllText(file.FullName);
            if (data.Contains(Constants.UmbracoApiController))
            {
                controllers.Add(new ApiController()
                {
                    File = file,
                    Name = file.Name
                });
            }
        }

        return controllers;
    }
}