using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using VulnerabilityScanner.ApiAuthorization.Models;

namespace VulnerabilityScanner.ApiAuthorization;

public static class Scanner
{
    private static void ScanControllersForAuthorizationUsingStrings(List<ApiController> controllers)
    {
        foreach (ApiController controller in controllers)
        {
            string data = File.ReadAllText(controller.File.FullName);
            controller.HasAuthorization = data.Contains(Constants.MemberAuthorize);
        }
    }
    public static void ScanControllersForAuthorizationUsingSyntaxTree(List<ApiController> controllers)
    {
        foreach (ApiController controller in controllers)
        {
            string data = File.ReadAllText(controller.File.FullName);
            SyntaxTree tree = CSharpSyntaxTree.ParseText(data);
            CompilationUnitSyntax root = tree.GetCompilationUnitRoot();
            
            NamespaceDeclarationSyntax @namespace = (NamespaceDeclarationSyntax)root.Members.First();
            MemberDeclarationSyntax @class = @namespace.Members.First();
            AttributeListSyntax attributeList = @class.AttributeLists.FirstOrDefault();

            AttributeSyntax attribute = attributeList?.Attributes.FirstOrDefault(a => a.GetText().ToString().Contains("MemberAuthorize"));
            if (attribute == null) continue;
            
            controller.HasAuthorization = true;

            AttributeArgumentSyntax argument = attribute.ArgumentList?.Arguments.FirstOrDefault();
            if (argument == null) continue;
            
            controller.AccessGroup = argument.Expression.GetText().ToString();
        }
    }
    public static List<ApiController> ScanForControllers(string folderPath)
    {
        FileInfo[] files = new DirectoryInfo(folderPath).GetFiles("*.cs", SearchOption.AllDirectories);
        List<ApiController> controllers = new();
        foreach (FileInfo file in files)
        {
            string data = File.ReadAllText(file.FullName);
            if (data.Contains(Constants.UmbracoApiController))
            {
                controllers.Add(new ApiController()
                {
                    File = file,
                    Name = file.Name
                });
            }
        }

        return controllers;
    }
}