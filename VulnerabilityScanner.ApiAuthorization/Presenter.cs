using VulnerabilityScanner.ApiAuthorization.Models;

namespace VulnerabilityScanner.ApiAuthorization;

public static class Presenter
{
    public static void PresentStats(List<ApiController> controllers)
    {
        Console.WriteLine($"Controllers with authorization: {controllers.Count(c => c.HasAuthorization)}/{controllers.Count}");
        Console.WriteLine($"Controllers without authorization: {controllers.Count(c => !c.HasAuthorization)}");
    }
    public static void PresentResultAsMarkDownTable(List<ApiController> controllers)
    {
        Console.Clear();
        Console.WriteLine("| Controller | HasAuthorization | Authorization group |");
        Console.WriteLine("|-----------|-----------------|---------------------|");
        foreach (ApiController controller in controllers.Where(o => o.HasAuthorization).OrderBy(o => o.AccessGroup).ThenBy(o => o.File.DirectoryName).ThenBy(o => o.File.Name))
        {
            Console.WriteLine($"| {controller.DisplayName} | {controller.DisplayHasAuthorization} | {controller.DisplayAccessGroup} |");
        }
        foreach (ApiController controller in controllers.Where(o => !o.HasAuthorization).OrderBy(o => o.File.DirectoryName).ThenBy(o => o.File.Name))
        {
            Console.WriteLine($"| {controller.DisplayName} | {controller.DisplayHasAuthorization} |  |");
        }
    }
    public static void PresentResult(List<ApiController> controllers)
    {
        controllers = controllers.OrderBy(c => c.AccessGroup)
                                 .ToList();
        Console.Clear();
        Console.WriteLine("Authorized controllers:");
        string lastGroup = "";
        foreach (ApiController authorizedController in controllers.Where(o => o.HasAuthorization))
        {
            if (string.IsNullOrWhiteSpace(authorizedController.AccessGroup)) {
                authorizedController.AccessGroup = "AnyoneLoggedIn";
            }
            if (authorizedController.AccessGroup != lastGroup)
            {
                lastGroup = authorizedController.AccessGroup;
                UIHelper.PrintColored($"\n{authorizedController.AccessGroup}:", ConsoleColor.Blue);
            }
            
            UIHelper.PrintGreen($"{authorizedController.Name}");
        }
        Console.WriteLine();
        Console.WriteLine("Unauthorized controllers:");
        foreach (ApiController controller in controllers.Where(o => !o.HasAuthorization))
        {
            UIHelper.PrintRed($"{controller.Name}");
        }
    }
}